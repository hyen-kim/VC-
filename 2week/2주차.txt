
=========================================================

제 2장 MFC개요 및 아키텍쳐

=========================================================

● SDI 만드는법
- 새프로젝트 -> 단일문서, 프로젝트스타일(MFC standard)

● MDI 만드는법
- 새프로젝트 -> 여러문서, 프로젝트스타일(MFC standard) 

--> 창이 한개만 존재하는게 SDI, 여러개 존재하는게 MDI 


● MFC 
- 윈도우 애플리케이션을 생성하기 위해 만들어진 C++ 클래스 라이브러리
- 애플리케이션 프레임워크를 제공

● MFC의 이점
- 윈도우 프로그램 전문가로 만들어준다.
- 개발시간을 단축시키고, 이식성이 강한 코드를 작성
- ActiveX, OLE, 인터넷 프로그래밍 같은 기술 지원
- 응용 프로그램(데이터베이스, 네트워크)을 손쉽게 작성
- 강력한 사용자 인터페이스를 지원

● MFC의 표기법
- 헝가리안 표기법을 사용
- 클래스는 모두 C로 시작
- 여러 단어가 하나의 클래스 이름일 경우 각 단어별로 첫 글자를 대문자로 표기
- '멤버 변수'는 m_로 시작하고, 멤버 함수는 대문자로 시작 -> ex) m_bColor = TRUE;
- '전역 함수'는 Afx라는 접두어기 붙는다.


● SDI 애플리케이션의 구조
- CWinApp 파생클래스는 창 전체 영역을 뜻함
- CFrameWnd 파생클래스는 위의 상단바 창단을 뜻함
- Cview 파생클래스는 상단바 창 밑의 하얀 창을 의미
- CDocument 파생클래스는 하얀창에서 돌아가는 것을 의미 눈에 보이진 않음
* Template : 윈도우로 출력되는 형태
* Main Frame : 원도우 외곽 경계를 담당, 메뉴, 툴바, 상태바를 가지고 있음
* View 윈도 : 실제 화면 처리를 담당, 문자 출력, 그래픽 출력 등
* Document : 디스크에서 데이터를 읽고 저장


● MDI 애플리케이션의 구조
- 여러 개의 SDI 형태 프로그램
* Main Frame : 독립적으로 설정되어 있고 그안에 template
* Application Class : MFC 프로그램은 템플릿을 포함하고 
                      한 개의 인스턴스를 포함하는 Application class가 있음


● Visual C++의 특징
- 다양한 SDK 형태의 라이브러리를 제공한다.
	-> Window환경에 맞는 C 언어용 표준 라이브러리
- 강력한 MFC가 있다.
	-> SDK를 이용하여 클래스를 만들 때의 문제점을 해결
	-> 클래스 라이브러리
- 강력한 마법사가 있다.
	-> 단순히 반복적인 코딩을 자동으로 생성
	-> 클래스 마법사, 응용프로그램 마법사, Resource Editor, ... 

● MFC 응용 프로그램 마법사 익히기
- 프로젝트를 만들 때 실행되는 프로그램
- 단순히 마우스 버튼으로 몇 개의 항목을 설정하면 자동적으로 프로젝트를 만들어주고
  자동 코딩을 해주는 기능
-> 자동으로 소스를 만들어 주는 프로그램 ?			예
-> 기존의 소스를 단순하게 복사형 코딩 하는 프로그램 ?		아니요
								: 우리가 선택하는 사항에 따라 코딩이 된다. 단순 복사가 아님
-> 기존의 있는 클래스를 상속 받는 또 하나의 클래스를 생성 ?	예 



● 응용프로그램 종류 단계
* 프로그램의 형태 선택
- 단일 문서
- 다중 문서
- 대화상자 기반
* 문서/뷰 아키텍처
* SDL 검사
* 프로젝트 스타일
* 비주얼 스타일 및 색
* MFC 사용

● 문서 템플릿 속성 단계
- 파일 확장명
- 필터 이름
- 주 프레임 캡션
- 파일 형식 ID
- 문서 형식 이름
- 파일형식의 긴 이름
- 파일의 새 약식 이름

● 사용자 인터페이스 기능 단계
* 윈도 출력 형태 설정
- 주 프레임 스타일
- 자식 프레임 스타일
- 툴바의 형태
	-> 클래식 메뉴
	-> 메뉴 모음 및 도구 모음
	-> 리본

● 고급기능 단계
- Active X 옵션 설정
	-> ActiveX 컨트롤을 자신의 프로그램에 삽입 시킬 수 있는지
- 인쇄 기능
- 윈도우 소켓
- 자동화
- 다시 시작 관리자 지원


● 생성된 클래스 단계
- Class 와 파일 대한 정보 및 수정
	-> class 이름은 모든 class에서 변경할 수 있다.
	-> Source file과 Header file 이름은 App class 이외에 다른 class 에서만 변경할 수 있다,
	-> Base class 이름은 View class 에서만 변경할 수 있다.



● MDI 프로젝트 만들기
- SDI 프로젝트 생성과 동일하고 Step1에서 MDI를 선택
- CChildFrame 만이 추가 되었다.
- Child Frame class는 Base class 이름만 변경할 수 없다.

● 응용 프로그램 마법사 기능
- 만들고자 하는 기본적인 프로젝트를 생성 해주고 그 안에 필요한 클래스 생성
	: 클래스에 기본적인 내용을 코딩
- 기본적인 코딩시간을 절약하므로 빠른 프로젝트 완성
- 응용 프로그램 마법사 사용 도중 실수로 옵션을 선택하지 않았을 경우 소스에서 새로 추가할 수 있다.

● 프로젝트 워크스페이스의 구성
* 클래스 뷰
- MFC 클래스를 상속 받아 탄생된 새로운 클래스
* 솔루션 탐색기
- 클래스 소스가 설정되어 있는 파일들
* 리소스 뷰
- 프로그램에 필요한 메뉴, 아이콘, 문자열, 대화상자 같은 자원

● 프로젝트 워크스페이스의 항목별 설명
* 클래스 뷰
- 프로젝트에 설정되어 있는 클래스별로 출력, 해당 항목을 선택하면 수정 가능
* 리소스 뷰
- 프로젝트에 설정되어 있는 메뉴, 대화상자, 문자열, 아이콘, 비트맵 등 자원의 리스트 출력,
  해당 항목 선택 수정 가능
* 솔루션 탐색기
- 프로젝트에 설정되어 있는 파일 리스트 출력, 
  해당 항목을 선택하여 수정 가능

● 클래스 뷰 화면 ( 무조건 대문자 C로 시작 )	--> 보기에 있음
- 해당 항목을 더블 클릭하면 클래스 헤더가 나타나고 클래스를 클릭하면 해당 클래스의 함수나 변수가 아래화면에 나타남
- 아래화면은 해당 클래스의 멤버 함수와 멤버 변수의 리스트
- 아래화면의 해당 멤버함수나 멤버 변수를 클릭하면 해당 항목이 설정되어있는 소스 파일로 이동
- protected 형태로 설정되어 있을 경우 (열쇠)
- protected 형태로 설정되어 있지 않을 경우는 열쇠 아이콘이 나타나지 않음

● 리소스 뷰 화면
- 리소스 : 윈도우 프로그램을 만들 때 필요한 자원
- 엑셀레이터(핫 키 정의) 키 값을 정의하는 항목
- 대화 상자(어떤 형태의 대화 상자의 출력할 폼을 만들어서 저장) 자원들
- 아이콘 자원
- 메뉴 자원
- 문자열 테이블
- 툴바

● 솔루션 탐색기 화면
- 소스파일
- 헤더파일
- 자원파일




< 아홉가지 꼭 기억해두기 > 시험문제 출제 ** 

● SDI 템플릿
- 애플리케이션의 여러 자원들과 메인 프레임 클래스, 
  View 클래스, Document 클래스 등을 하나의 묶음으로 가지는 클래스

1) 애플리케이션 클래스의 인스턴스 얻기
명칭 *포인터이름 = 클래스이름 *AfxGetApp();
- 애플리케이션 클래스를 얻을 때는 애플리케이션 클래스의 포인터 변수를 생성
- AfxGetApp() 라는 함수를 이용하여 애플리케이션 클래스의 인스턴스를 얻는다.
- 마지막으로 형 전환을 해준다.

2) 메인 프레임 클래스의 인스턴스 얻기
- 메뉴와 툴바, 상태바 등의 상태를 바꾸기 위해서는 메인 프레임 클래스에 접근해야한다.

3) 뷰 클래스의 인스턴스 얻기
- 메인 프레임의 인스턴스로 그 함수를 가르켜야한다.

4) 도큐먼트 클래스의 인스턴스 얻기
- 뷰와 같은 레벨
- GetActiveDocument()라는 함수를 호출


● MDI 템플릿
- 하나의 프로그램에서 여러 개의 문서 객체를 가지는 애플리케이션의 형태

1) 애플리케이션 클래스의 인스턴스 얻기 
- 애플리케이션 클래스를 얻을 때는 애플리케이션 클래스의 포인터 변수를 생성
- AfxGetApp() 라는 함수를 이용하여 애플리케이션 클래스의 인스턴스를 얻는다.
- 마지막으로 형 전환을 해준다.

2) 메인 프레임 클래스의 인스턴스 얻기
- 메뉴와 툴바, 상태바 등의 상태를 바꾸기 위해서는 메인 프레임 클래스에 접근해야한다.

3) 뷰 클래스의 인스턴스 얻기
- 메인 프레임의 인스턴스로 그 함수를 가르켜야한다.

4) 도큐먼트 클래스의 인스턴스 얻기
- 뷰와 같은 레벨
- GetActiveDocument()라는 함수를 호출

5) 자식 프레임 클래스의 인스턴스 얻기


● CObject 클래스 (최상위 클래스)
- 메모리에 클래스를 설정하는 기능
- 클래스를 할당하기 위한 new 연산자가 오버로딩
- /MFC/Include/Afx.h에 설정
- 클래스의 기능과 종류를 알 수 있는 함수가 있음
	-> IsSerializable() : 현재 클래스가 데이터를 디스크에 저장할 수 있는 기능을 자지고 있는지 없는지를 확인하는 함수
	-> AssertValid()    : 현재 클래스가 유효한 클래스인가를 확인하는 함수
	-> Dump()	    : 현재 클래스의 상태를 확인하는 함수
	* 디버깅할 때 이 함수를 이용하여 데이터의 상태를 확인하고 오류를 정리할 수 있음

● CCmdTarget 클래스 
- 메시지 전송을 담당하는 클래스
- 실질적으로 메시지를 처리하는 것이 아니라 WM_COMMAND와 OLE 메시지만 담당

● CWnd 클래스 
- 화면에 보이는 윈도들은 모두 CWnd에서 상속받음
- 가장 많이 사용되는 클래스
- 윈도우의 최상위 클래스
- 상속해서 사용하지 직접 CWnd클래스를 사용하지는 않는다.
- 윈도우를 구동하는 모든 기능을 가진 함수가 있다.
-> Initialization
-> Window State Functions
-> Window Size and position
-> Coordinate Mapping Function
-> Window Message Function

● CWndThread 클래스
- 윈도가 스레드로 돌아갈 수 있도록 구동 되는 클래스
	-> 스레드는 독립적인 형태로 구동 되는 하나의 모듈
- 한 개의 프로그램을 독립적으로 움직이려면 한 개의 프로그램은 한 개 이상의 CWin Thread를 포함해야한다.
	-> Multi-tasking이 가능
- CWndApp 클래스
	-> 한 개의 프로그램을 포함하고 관장하는 클래스

● CDocument 클래스
- 데이터를 디스크에서 읽어 들이거나 디스크에 저장하는 부분을 담당하는 클래스
- 주로 알고리즘을 저장
- 나중에 다른 프로그램에서 재사용이 용이






